service:
  name: shopify

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 256
  timeout: 10
  environment: ${file(env.yml):${self:custom.stage}}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  shopsTable: "${self:service}-shops-${self:custom.stage}"
  appUninstalledTopic: "${self:service}-app-uninstalled-${self:custom.stage}"
  shopUpdateTopic: "${self:service}-shop-update-${self:custom.stage}"
  userPoolName: "${self:service}-user-pool-${self:custom.stage}"
  userPoolReplyToEmailAddress: ${file(env.yml):${self:custom.stage}.REPLY_EMAIL}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
    packager: "yarn"

package:
  exclude:
    - .gitignore
    - appsync/**
    - coverage/**
    - env-example.yml
    - env.yml
    - src/**
    - schema.json
    - serverless.yml
    - tsconfig.json
    - tslint.json
    - webpack.config.js
    - yarn.lock

functions:
  appUninstalled:
    handler: src/appUninstalled.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
    events:
      - sns: ${self:custom.appUninstalledTopic}
  authBegin:
    handler: src/authBegin.handler
    events:
      - http:
          path: auth/{platform}
          method: get
          cors: true
  authComplete:
    handler: src/authComplete.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminUpdateUserAttributes
        Resource: { "Fn::GetAtt" : ["CognitoUserPoolAppUserPool", "Arn"] }
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: { "Ref": "AuthCompleteStepFunDash${self:service}Dash${self:custom.stage}" }
    events:
      - http:
          path: auth/{platform}
          method: post
          cors: true
    environment:
      AUTH_COMPLETE_STEP_FUNCTION_ARN: { "Ref": "AuthCompleteStepFunDash${self:service}Dash${self:custom.stage}" }
      USER_POOL_ID: { "Ref": "CognitoUserPoolAppUserPool" }
  createAuthChallenge:
    handler: src/createAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: AppUserPool
          trigger: CreateAuthChallenge
  defineAuthChallenge:
    handler: src/defineAuthChallenge.handler
    events:
      - cognitoUserPool:
          pool: AppUserPool
          trigger: DefineAuthChallenge
  getShopSettings:
    handler: src/getShopSettings.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
  preSignUp:
    handler: src/preSignUp.handler
    events:
      - cognitoUserPool:
          pool: AppUserPool
          trigger: PreSignUp
  scriptTagsManager:
    handler: src/scriptTagsManager.handler
  shopUpdate:
    handler: src/shopUpdate.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
    events:
      - sns: ${self:custom.shopUpdateTopic}
  verifyAuthChallengeResponse:
    handler: src/verifyAuthChallengeResponse.handler
    events:
      - cognitoUserPool:
          pool: AppUserPool
          trigger: VerifyAuthChallengeResponse
  webhooksHandler:
    handler: src/webhooksHandler.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.appUninstalledTopic}" ] ]  }
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.shopUpdateTopic}" ] ]  }
    events:
      - http:
          path: webhooks/shopify/{webhook+}
          method: post
    environment:
      APP_UNINSTALLED_TOPIC_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.appUninstalledTopic}" ] ]  }
      SHOP_UPDATE_TOPIC_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.shopUpdateTopic}" ] ]  }
  webhooksManager:
    handler: src/webhooksManager.handler
    environment:
      WEBHOOKS_URL: { "Fn::Join" : ["", ["https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/webhooks/shopify" ] ]  }

stepFunctions:
  stateMachines:
    AuthComplete:
      name: authCompleteStepFun-${self:service}-${self:custom.stage}
      definition:
        Comment: "All of the tasks required after the user completes OAuth"
        StartAt: Parallel
        States:
          Parallel:
            Type: Parallel
            End: true
            Branches:
              - StartAt: InstallWebhooks
                States:
                  InstallWebhooks:
                    Type: Task
                    Resource: "arn:aws:lambda:us-west-2:529152589513:function:shopify-dev-webhooksManager"
                    End: true
              - StartAt: InstallScriptTags
                States:
                  InstallScriptTags:
                    Type: Task
                    Resource: "arn:aws:lambda:us-west-2:529152589513:function:shopify-dev-scriptTagsManager"
                    End: true
              - StartAt: GetShopSettings
                States:
                  GetShopSettings:
                    Type: Task
                    Resource: "arn:aws:lambda:us-west-2:529152589513:function:shopify-dev-getShopSettings"
                    End: true

resources:
  Resources:
    CognitoUserPoolAppUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        DeviceConfiguration: 
          ChallengeRequiredOnNewDevice: false
        EmailConfiguration: 
          ReplyToEmailAddress: ${self:custom.userPoolReplyToEmailAddress}
        MfaConfiguration: OFF
        Policies: 
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        UsernameAttributes:
          - email
        UserPoolName: ${self:custom.userPoolName}
    CognitoUserPoolClientAppUserPoolDefault:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "default-client"
        GenerateSecret: false
        RefreshTokenValidity: 30
        UserPoolId: { "Ref": "CognitoUserPoolAppUserPool" }
    CognitoUserPoolClientAppUserPoolOAuth:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "oauth-client"
        GenerateSecret: false
        ExplicitAuthFlows:
          - "CUSTOM_AUTH_FLOW_ONLY"
        RefreshTokenValidity: 30
        UserPoolId: { "Ref": "CognitoUserPoolAppUserPool" }
    ShopsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.shopsTable}
        AttributeDefinitions:
          - AttributeName: shopDomain
            AttributeType: S
        KeySchema:
          - AttributeName: shopDomain
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    AppSyncGraphQLApiLogRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "appsync.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "${self:service}-${self:custom.stage}-${self:custom.region}-appSyncLogRoleLogPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "*"
                -
                  Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
        RoleName: "${self:service}-${self:custom.stage}-${self:custom.region}-appSyncLogRole"
    AppSyncGraphQLApi:
      Type: AWS::AppSync::GraphQLApi
      Properties:
        UserPoolConfig:
          UserPoolId: { "Ref": "CognitoUserPoolAppUserPool" }
          AwsRegion: ${self:custom.region}
          DefaultAction: ALLOW
        Name: "${self:service}-${self:provider.stage}"
        AuthenticationType: AMAZON_COGNITO_USER_POOLS
        LogConfig:
          CloudWatchLogsRoleArn: { "Fn::GetAtt" : ["AppSyncGraphQLApiLogRole", "Arn"] }
          FieldLogLevel: ERROR
    AppSyncGraphQLSchema:
      Type: AWS::AppSync::GraphQLSchema
      Properties:
        Definition: ${file(appsync/schema.graphql)}
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
    AppSyncDataSourceShopsTable:
      Type: AWS::AppSync::DataSource
      Properties:
        Type: AMAZON_DYNAMODB
        ServiceRoleArn: { "Fn::GetAtt" : ["AppSyncGraphQLApiLogRole", "Arn"] }
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
        Name: "shops_${self:custom.stage}"
        DynamoDBConfig:
          TableName: ${self:custom.shopsTable}
          AwsRegion: ${self:custom.region}
          UseCallerCredentials: false
    AppSyncResolverQuerySinglePost:
      Type: AWS::AppSync::Resolver
      Properties:
        TypeName: "Query"
        DataSourceName: "shops_${self:custom.stage}"
        RequestMappingTemplate: ${file(./appsync/query_shop_request.vtl)}
        ResponseMappingTemplate: ${file(./appsync/query_shop_response.vtl)}
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
        FieldName: "shop"
